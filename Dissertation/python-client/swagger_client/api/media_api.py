# coding: utf-8

"""
    Betaface API 2.0

    Betaface face recognition API.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MediaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_media_file_post(self, api_key, file, **kwargs):  # noqa: E501
        """upload media file using multipart/form-data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_media_file_post(api_key, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
        :param file file: a media file to upload (required)
        :param str detection_flags: (optional) comma separated list of detection flags: bestface - return only face with highest detection score, , centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \"basicpoints,propoints,classifiers,content\"
        :param float detection_min_score: (optional) filter faces with detection score lower than min_score.
        :param str detection_new_faces: (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \"x\": 0, \"y\": 0, \"width\": 0, \"height\": 0, \"angle\": 0, \"points\": [ { \"x\": 0, \"y\": 0, \"type\": 0 }, { \"x\": 0, \"y\": 0, \"type\": 0 }], \"tags\": [ { \"name\": \"\",  \"value\": \"\",  \"confidence\": 1.0 }, {\"name\": \"\", \"value\": \"\", \"confidence\": 1.0 } ], \"set_person_id\": \"\"}
        :param str set_person_id: (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \"John Doe@mynamespace\"
        :param str recognize_targets: (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \"all@mynamespace,John Doe@othernamespace\"
        :param str recognize_parameters: (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \"min_match_score:0.4,min_score:0.2,gender:male,race:white\"
        :param str original_filename: (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference.
        :return: MediaUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_media_file_post_with_http_info(api_key, file, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_media_file_post_with_http_info(api_key, file, **kwargs)  # noqa: E501
            return data

    def v2_media_file_post_with_http_info(self, api_key, file, **kwargs):  # noqa: E501
        """upload media file using multipart/form-data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_media_file_post_with_http_info(api_key, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
        :param file file: a media file to upload (required)
        :param str detection_flags: (optional) comma separated list of detection flags: bestface - return only face with highest detection score, , centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \"basicpoints,propoints,classifiers,content\"
        :param float detection_min_score: (optional) filter faces with detection score lower than min_score.
        :param str detection_new_faces: (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \"x\": 0, \"y\": 0, \"width\": 0, \"height\": 0, \"angle\": 0, \"points\": [ { \"x\": 0, \"y\": 0, \"type\": 0 }, { \"x\": 0, \"y\": 0, \"type\": 0 }], \"tags\": [ { \"name\": \"\",  \"value\": \"\",  \"confidence\": 1.0 }, {\"name\": \"\", \"value\": \"\", \"confidence\": 1.0 } ], \"set_person_id\": \"\"}
        :param str set_person_id: (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \"John Doe@mynamespace\"
        :param str recognize_targets: (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \"all@mynamespace,John Doe@othernamespace\"
        :param str recognize_parameters: (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \"min_match_score:0.4,min_score:0.2,gender:male,race:white\"
        :param str original_filename: (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference.
        :return: MediaUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'file', 'detection_flags', 'detection_min_score', 'detection_new_faces', 'set_person_id', 'recognize_targets', 'recognize_parameters', 'original_filename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_media_file_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `v2_media_file_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `v2_media_file_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'api_key' in params:
            form_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'detection_flags' in params:
            form_params.append(('detection_flags', params['detection_flags']))  # noqa: E501
        if 'detection_min_score' in params:
            form_params.append(('detection_min_score', params['detection_min_score']))  # noqa: E501
        if 'detection_new_faces' in params:
            form_params.append(('detection_new_faces', params['detection_new_faces']))  # noqa: E501
        if 'set_person_id' in params:
            form_params.append(('set_person_id', params['set_person_id']))  # noqa: E501
        if 'recognize_targets' in params:
            form_params.append(('recognize_targets', params['recognize_targets']))  # noqa: E501
        if 'recognize_parameters' in params:
            form_params.append(('recognize_parameters', params['recognize_parameters']))  # noqa: E501
        if 'original_filename' in params:
            form_params.append(('original_filename', params['original_filename']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/media/file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_media_get(self, api_key, media_uuid, **kwargs):  # noqa: E501
        """gets a media information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_media_get(api_key, media_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
        :param str media_uuid: the requested media identifier. (required)
        :return: Media
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_media_get_with_http_info(api_key, media_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_media_get_with_http_info(api_key, media_uuid, **kwargs)  # noqa: E501
            return data

    def v2_media_get_with_http_info(self, api_key, media_uuid, **kwargs):  # noqa: E501
        """gets a media information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_media_get_with_http_info(api_key, media_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
        :param str media_uuid: the requested media identifier. (required)
        :return: Media
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'media_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_media_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `v2_media_get`")  # noqa: E501
        # verify the required parameter 'media_uuid' is set
        if ('media_uuid' not in params or
                params['media_uuid'] is None):
            raise ValueError("Missing the required parameter `media_uuid` when calling `v2_media_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'media_uuid' in params:
            query_params.append(('media_uuid', params['media_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/media', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Media',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_media_hash_get(self, api_key, checksum, **kwargs):  # noqa: E501
        """gets a media information using SHA256 hash of media file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_media_hash_get(api_key, checksum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
        :param str checksum: SHA256 media file hash. (required)
        :return: Media
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_media_hash_get_with_http_info(api_key, checksum, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_media_hash_get_with_http_info(api_key, checksum, **kwargs)  # noqa: E501
            return data

    def v2_media_hash_get_with_http_info(self, api_key, checksum, **kwargs):  # noqa: E501
        """gets a media information using SHA256 hash of media file.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_media_hash_get_with_http_info(api_key, checksum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: your API key or d45fd466-51e2-4701-8da8-04351c872236 (required)
        :param str checksum: SHA256 media file hash. (required)
        :return: Media
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'checksum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_media_hash_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `v2_media_hash_get`")  # noqa: E501
        # verify the required parameter 'checksum' is set
        if ('checksum' not in params or
                params['checksum'] is None):
            raise ValueError("Missing the required parameter `checksum` when calling `v2_media_hash_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'checksum' in params:
            query_params.append(('checksum', params['checksum']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/media/hash', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Media',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_media_post(self, **kwargs):  # noqa: E501
        """upload media file using file uri or file content as base64 encoded string  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_media_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MediaUpload body: request json body with parameters.
        :return: MediaUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_media_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_media_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_media_post_with_http_info(self, **kwargs):  # noqa: E501
        """upload media file using file uri or file content as base64 encoded string  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_media_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MediaUpload body: request json body with parameters.
        :return: MediaUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_media_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/media', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaUploadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
