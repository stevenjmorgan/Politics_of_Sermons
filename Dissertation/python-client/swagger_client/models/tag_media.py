# coding: utf-8

"""
    Betaface API 2.0

    Betaface face recognition API.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TagMedia(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value': 'str',
        'confidence': 'float',
        'x': 'float',
        'y': 'float',
        'width': 'float',
        'height': 'float',
        'angle': 'float',
        'instance_id': 'int',
        'start': 'str',
        'duration': 'str'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'confidence': 'confidence',
        'x': 'x',
        'y': 'y',
        'width': 'width',
        'height': 'height',
        'angle': 'angle',
        'instance_id': 'instance_id',
        'start': 'start',
        'duration': 'duration'
    }

    def __init__(self, name=None, value=None, confidence=None, x=None, y=None, width=None, height=None, angle=None, instance_id=None, start=None, duration=None):  # noqa: E501
        """TagMedia - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._value = None
        self._confidence = None
        self._x = None
        self._y = None
        self._width = None
        self._height = None
        self._angle = None
        self._instance_id = None
        self._start = None
        self._duration = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if confidence is not None:
            self.confidence = confidence
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if angle is not None:
            self.angle = angle
        if instance_id is not None:
            self.instance_id = instance_id
        if start is not None:
            self.start = start
        if duration is not None:
            self.duration = duration

    @property
    def name(self):
        """Gets the name of this TagMedia.  # noqa: E501

        tag name.  # noqa: E501

        :return: The name of this TagMedia.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagMedia.

        tag name.  # noqa: E501

        :param name: The name of this TagMedia.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this TagMedia.  # noqa: E501

        tag value.  # noqa: E501

        :return: The value of this TagMedia.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TagMedia.

        tag value.  # noqa: E501

        :param value: The value of this TagMedia.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def confidence(self):
        """Gets the confidence of this TagMedia.  # noqa: E501

        tag confidence, if automatically detected, otherwise 1.0.  # noqa: E501

        :return: The confidence of this TagMedia.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this TagMedia.

        tag confidence, if automatically detected, otherwise 1.0.  # noqa: E501

        :param confidence: The confidence of this TagMedia.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def x(self):
        """Gets the x of this TagMedia.  # noqa: E501

        reserved for future use  # noqa: E501

        :return: The x of this TagMedia.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this TagMedia.

        reserved for future use  # noqa: E501

        :param x: The x of this TagMedia.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this TagMedia.  # noqa: E501

        reserved for future use  # noqa: E501

        :return: The y of this TagMedia.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this TagMedia.

        reserved for future use  # noqa: E501

        :param y: The y of this TagMedia.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def width(self):
        """Gets the width of this TagMedia.  # noqa: E501

        reserved for future use  # noqa: E501

        :return: The width of this TagMedia.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this TagMedia.

        reserved for future use  # noqa: E501

        :param width: The width of this TagMedia.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this TagMedia.  # noqa: E501

        reserved for future use  # noqa: E501

        :return: The height of this TagMedia.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this TagMedia.

        reserved for future use  # noqa: E501

        :param height: The height of this TagMedia.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def angle(self):
        """Gets the angle of this TagMedia.  # noqa: E501

        reserved for future use  # noqa: E501

        :return: The angle of this TagMedia.  # noqa: E501
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this TagMedia.

        reserved for future use  # noqa: E501

        :param angle: The angle of this TagMedia.  # noqa: E501
        :type: float
        """

        self._angle = angle

    @property
    def instance_id(self):
        """Gets the instance_id of this TagMedia.  # noqa: E501

        reserved for future use  # noqa: E501

        :return: The instance_id of this TagMedia.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this TagMedia.

        reserved for future use  # noqa: E501

        :param instance_id: The instance_id of this TagMedia.  # noqa: E501
        :type: int
        """

        self._instance_id = instance_id

    @property
    def start(self):
        """Gets the start of this TagMedia.  # noqa: E501

        reserved for future video processing  # noqa: E501

        :return: The start of this TagMedia.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TagMedia.

        reserved for future video processing  # noqa: E501

        :param start: The start of this TagMedia.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def duration(self):
        """Gets the duration of this TagMedia.  # noqa: E501

        reserved for future video processing  # noqa: E501

        :return: The duration of this TagMedia.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TagMedia.

        reserved for future video processing  # noqa: E501

        :param duration: The duration of this TagMedia.  # noqa: E501
        :type: str
        """

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagMedia, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagMedia):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
