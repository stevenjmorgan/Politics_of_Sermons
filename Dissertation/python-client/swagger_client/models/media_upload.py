# coding: utf-8

"""
    Betaface API 2.0

    Betaface face recognition API.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.new_face import NewFace  # noqa: F401,E501


class MediaUpload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'file_uri': 'str',
        'file_base64': 'str',
        'detection_flags': 'str',
        'detection_min_score': 'float',
        'detection_new_faces': 'list[NewFace]',
        'set_person_id': 'str',
        'recognize_targets': 'list[str]',
        'recognize_parameters': 'str',
        'original_filename': 'str'
    }

    attribute_map = {
        'api_key': 'api_key',
        'file_uri': 'file_uri',
        'file_base64': 'file_base64',
        'detection_flags': 'detection_flags',
        'detection_min_score': 'detection_min_score',
        'detection_new_faces': 'detection_new_faces',
        'set_person_id': 'set_person_id',
        'recognize_targets': 'recognize_targets',
        'recognize_parameters': 'recognize_parameters',
        'original_filename': 'original_filename'
    }

    def __init__(self, api_key=None, file_uri=None, file_base64=None, detection_flags=None, detection_min_score=None, detection_new_faces=None, set_person_id=None, recognize_targets=None, recognize_parameters=None, original_filename=None):  # noqa: E501
        """MediaUpload - a model defined in Swagger"""  # noqa: E501

        self._api_key = None
        self._file_uri = None
        self._file_base64 = None
        self._detection_flags = None
        self._detection_min_score = None
        self._detection_new_faces = None
        self._set_person_id = None
        self._recognize_targets = None
        self._recognize_parameters = None
        self._original_filename = None
        self.discriminator = None

        self.api_key = api_key
        if file_uri is not None:
            self.file_uri = file_uri
        if file_base64 is not None:
            self.file_base64 = file_base64
        if detection_flags is not None:
            self.detection_flags = detection_flags
        if detection_min_score is not None:
            self.detection_min_score = detection_min_score
        if detection_new_faces is not None:
            self.detection_new_faces = detection_new_faces
        if set_person_id is not None:
            self.set_person_id = set_person_id
        if recognize_targets is not None:
            self.recognize_targets = recognize_targets
        if recognize_parameters is not None:
            self.recognize_parameters = recognize_parameters
        if original_filename is not None:
            self.original_filename = original_filename

    @property
    def api_key(self):
        """Gets the api_key of this MediaUpload.  # noqa: E501

        your API key or d45fd466-51e2-4701-8da8-04351c872236  # noqa: E501

        :return: The api_key of this MediaUpload.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this MediaUpload.

        your API key or d45fd466-51e2-4701-8da8-04351c872236  # noqa: E501

        :param api_key: The api_key of this MediaUpload.  # noqa: E501
        :type: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")  # noqa: E501

        self._api_key = api_key

    @property
    def file_uri(self):
        """Gets the file_uri of this MediaUpload.  # noqa: E501

        publicly accessible media file uri.  # noqa: E501

        :return: The file_uri of this MediaUpload.  # noqa: E501
        :rtype: str
        """
        return self._file_uri

    @file_uri.setter
    def file_uri(self, file_uri):
        """Sets the file_uri of this MediaUpload.

        publicly accessible media file uri.  # noqa: E501

        :param file_uri: The file_uri of this MediaUpload.  # noqa: E501
        :type: str
        """

        self._file_uri = file_uri

    @property
    def file_base64(self):
        """Gets the file_base64 of this MediaUpload.  # noqa: E501

        base64 encoded media file content. file_uri parameter will be ignored if file_base64 parameter is specified and not empty.  # noqa: E501

        :return: The file_base64 of this MediaUpload.  # noqa: E501
        :rtype: str
        """
        return self._file_base64

    @file_base64.setter
    def file_base64(self, file_base64):
        """Sets the file_base64 of this MediaUpload.

        base64 encoded media file content. file_uri parameter will be ignored if file_base64 parameter is specified and not empty.  # noqa: E501

        :param file_base64: The file_base64 of this MediaUpload.  # noqa: E501
        :type: str
        """

        self._file_base64 = file_base64

    @property
    def detection_flags(self):
        """Gets the detection_flags of this MediaUpload.  # noqa: E501

        (optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \"basicpoints,propoints,classifiers,content\"  # noqa: E501

        :return: The detection_flags of this MediaUpload.  # noqa: E501
        :rtype: str
        """
        return self._detection_flags

    @detection_flags.setter
    def detection_flags(self, detection_flags):
        """Sets the detection_flags of this MediaUpload.

        (optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \"basicpoints,propoints,classifiers,content\"  # noqa: E501

        :param detection_flags: The detection_flags of this MediaUpload.  # noqa: E501
        :type: str
        """

        self._detection_flags = detection_flags

    @property
    def detection_min_score(self):
        """Gets the detection_min_score of this MediaUpload.  # noqa: E501

        (optional) filter faces with detection score lower than min_score.  # noqa: E501

        :return: The detection_min_score of this MediaUpload.  # noqa: E501
        :rtype: float
        """
        return self._detection_min_score

    @detection_min_score.setter
    def detection_min_score(self, detection_min_score):
        """Sets the detection_min_score of this MediaUpload.

        (optional) filter faces with detection score lower than min_score.  # noqa: E501

        :param detection_min_score: The detection_min_score of this MediaUpload.  # noqa: E501
        :type: float
        """

        self._detection_min_score = detection_min_score

    @property
    def detection_new_faces(self):
        """Gets the detection_new_faces of this MediaUpload.  # noqa: E501

        (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide an array of new faces  # noqa: E501

        :return: The detection_new_faces of this MediaUpload.  # noqa: E501
        :rtype: list[NewFace]
        """
        return self._detection_new_faces

    @detection_new_faces.setter
    def detection_new_faces(self, detection_new_faces):
        """Sets the detection_new_faces of this MediaUpload.

        (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide an array of new faces  # noqa: E501

        :param detection_new_faces: The detection_new_faces of this MediaUpload.  # noqa: E501
        :type: list[NewFace]
        """

        self._detection_new_faces = detection_new_faces

    @property
    def set_person_id(self):
        """Gets the set_person_id of this MediaUpload.  # noqa: E501

        (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter.  # noqa: E501

        :return: The set_person_id of this MediaUpload.  # noqa: E501
        :rtype: str
        """
        return self._set_person_id

    @set_person_id.setter
    def set_person_id(self, set_person_id):
        """Sets the set_person_id of this MediaUpload.

        (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter.  # noqa: E501

        :param set_person_id: The set_person_id of this MediaUpload.  # noqa: E501
        :type: str
        """

        self._set_person_id = set_person_id

    @property
    def recognize_targets(self):
        """Gets the recognize_targets of this MediaUpload.  # noqa: E501

        (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  # noqa: E501

        :return: The recognize_targets of this MediaUpload.  # noqa: E501
        :rtype: list[str]
        """
        return self._recognize_targets

    @recognize_targets.setter
    def recognize_targets(self, recognize_targets):
        """Sets the recognize_targets of this MediaUpload.

        (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  # noqa: E501

        :param recognize_targets: The recognize_targets of this MediaUpload.  # noqa: E501
        :type: list[str]
        """

        self._recognize_targets = recognize_targets

    @property
    def recognize_parameters(self):
        """Gets the recognize_parameters of this MediaUpload.  # noqa: E501

        (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \"min_match_score:0.4,min_score:0.2,gender:male,race:white\"  # noqa: E501

        :return: The recognize_parameters of this MediaUpload.  # noqa: E501
        :rtype: str
        """
        return self._recognize_parameters

    @recognize_parameters.setter
    def recognize_parameters(self, recognize_parameters):
        """Sets the recognize_parameters of this MediaUpload.

        (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \"min_match_score:0.4,min_score:0.2,gender:male,race:white\"  # noqa: E501

        :param recognize_parameters: The recognize_parameters of this MediaUpload.  # noqa: E501
        :type: str
        """

        self._recognize_parameters = recognize_parameters

    @property
    def original_filename(self):
        """Gets the original_filename of this MediaUpload.  # noqa: E501

        (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference.  # noqa: E501

        :return: The original_filename of this MediaUpload.  # noqa: E501
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this MediaUpload.

        (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference.  # noqa: E501

        :param original_filename: The original_filename of this MediaUpload.  # noqa: E501
        :type: str
        """

        self._original_filename = original_filename

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MediaUpload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaUpload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
