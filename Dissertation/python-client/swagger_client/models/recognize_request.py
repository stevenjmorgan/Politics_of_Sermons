# coding: utf-8

"""
    Betaface API 2.0

    Betaface face recognition API.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RecognizeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'faces_uuids': 'list[str]',
        'targets': 'list[str]',
        'parameters': 'str'
    }

    attribute_map = {
        'api_key': 'api_key',
        'faces_uuids': 'faces_uuids',
        'targets': 'targets',
        'parameters': 'parameters'
    }

    def __init__(self, api_key=None, faces_uuids=None, targets=None, parameters=None):  # noqa: E501
        """RecognizeRequest - a model defined in Swagger"""  # noqa: E501

        self._api_key = None
        self._faces_uuids = None
        self._targets = None
        self._parameters = None
        self.discriminator = None

        self.api_key = api_key
        self.faces_uuids = faces_uuids
        self.targets = targets
        if parameters is not None:
            self.parameters = parameters

    @property
    def api_key(self):
        """Gets the api_key of this RecognizeRequest.  # noqa: E501

        your API key or d45fd466-51e2-4701-8da8-04351c872236  # noqa: E501

        :return: The api_key of this RecognizeRequest.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this RecognizeRequest.

        your API key or d45fd466-51e2-4701-8da8-04351c872236  # noqa: E501

        :param api_key: The api_key of this RecognizeRequest.  # noqa: E501
        :type: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")  # noqa: E501

        self._api_key = api_key

    @property
    def faces_uuids(self):
        """Gets the faces_uuids of this RecognizeRequest.  # noqa: E501

        list of face unique identifiers that should be recognized.  # noqa: E501

        :return: The faces_uuids of this RecognizeRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._faces_uuids

    @faces_uuids.setter
    def faces_uuids(self, faces_uuids):
        """Sets the faces_uuids of this RecognizeRequest.

        list of face unique identifiers that should be recognized.  # noqa: E501

        :param faces_uuids: The faces_uuids of this RecognizeRequest.  # noqa: E501
        :type: list[str]
        """
        if faces_uuids is None:
            raise ValueError("Invalid value for `faces_uuids`, must not be `None`")  # noqa: E501

        self._faces_uuids = faces_uuids

    @property
    def targets(self):
        """Gets the targets of this RecognizeRequest.  # noqa: E501

        list of recognition targets which can include face identifiers, fully qualified person ids in format name@namespace or entire namespaces in format all@namespace.  # noqa: E501

        :return: The targets of this RecognizeRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this RecognizeRequest.

        list of recognition targets which can include face identifiers, fully qualified person ids in format name@namespace or entire namespaces in format all@namespace.  # noqa: E501

        :param targets: The targets of this RecognizeRequest.  # noqa: E501
        :type: list[str]
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")  # noqa: E501

        self._targets = targets

    @property
    def parameters(self):
        """Gets the parameters of this RecognizeRequest.  # noqa: E501

        (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \"min_match_score:0.4,min_score:0.2,gender:male,race:white\"  # noqa: E501

        :return: The parameters of this RecognizeRequest.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this RecognizeRequest.

        (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \"min_match_score:0.4,min_score:0.2,gender:male,race:white\"  # noqa: E501

        :param parameters: The parameters of this RecognizeRequest.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecognizeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecognizeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
