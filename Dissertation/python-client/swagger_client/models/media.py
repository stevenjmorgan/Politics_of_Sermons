# coding: utf-8

"""
    Betaface API 2.0

    Betaface face recognition API.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.face import Face  # noqa: F401,E501
from swagger_client.models.tag_media import TagMedia  # noqa: F401,E501


class Media(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'media_uuid': 'str',
        'checksum': 'str',
        'faces': 'list[Face]',
        'tags': 'list[TagMedia]',
        'original_filename': 'str',
        'duration': 'str'
    }

    attribute_map = {
        'media_uuid': 'media_uuid',
        'checksum': 'checksum',
        'faces': 'faces',
        'tags': 'tags',
        'original_filename': 'original_filename',
        'duration': 'duration'
    }

    def __init__(self, media_uuid=None, checksum=None, faces=None, tags=None, original_filename=None, duration=None):  # noqa: E501
        """Media - a model defined in Swagger"""  # noqa: E501

        self._media_uuid = None
        self._checksum = None
        self._faces = None
        self._tags = None
        self._original_filename = None
        self._duration = None
        self.discriminator = None

        if media_uuid is not None:
            self.media_uuid = media_uuid
        if checksum is not None:
            self.checksum = checksum
        if faces is not None:
            self.faces = faces
        if tags is not None:
            self.tags = tags
        if original_filename is not None:
            self.original_filename = original_filename
        if duration is not None:
            self.duration = duration

    @property
    def media_uuid(self):
        """Gets the media_uuid of this Media.  # noqa: E501

        media unique identifier.  # noqa: E501

        :return: The media_uuid of this Media.  # noqa: E501
        :rtype: str
        """
        return self._media_uuid

    @media_uuid.setter
    def media_uuid(self, media_uuid):
        """Sets the media_uuid of this Media.

        media unique identifier.  # noqa: E501

        :param media_uuid: The media_uuid of this Media.  # noqa: E501
        :type: str
        """

        self._media_uuid = media_uuid

    @property
    def checksum(self):
        """Gets the checksum of this Media.  # noqa: E501

        media content hash value.  # noqa: E501

        :return: The checksum of this Media.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Media.

        media content hash value.  # noqa: E501

        :param checksum: The checksum of this Media.  # noqa: E501
        :type: str
        """
        if checksum is not None and len(checksum) > 64:
            raise ValueError("Invalid value for `checksum`, length must be less than or equal to `64`")  # noqa: E501
        if checksum is not None and len(checksum) < 64:
            raise ValueError("Invalid value for `checksum`, length must be greater than or equal to `64`")  # noqa: E501

        self._checksum = checksum

    @property
    def faces(self):
        """Gets the faces of this Media.  # noqa: E501

        collection of detected or labelled faces.  # noqa: E501

        :return: The faces of this Media.  # noqa: E501
        :rtype: list[Face]
        """
        return self._faces

    @faces.setter
    def faces(self, faces):
        """Sets the faces of this Media.

        collection of detected or labelled faces.  # noqa: E501

        :param faces: The faces of this Media.  # noqa: E501
        :type: list[Face]
        """

        self._faces = faces

    @property
    def tags(self):
        """Gets the tags of this Media.  # noqa: E501

        collection of media tags.  # noqa: E501

        :return: The tags of this Media.  # noqa: E501
        :rtype: list[TagMedia]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Media.

        collection of media tags.  # noqa: E501

        :param tags: The tags of this Media.  # noqa: E501
        :type: list[TagMedia]
        """

        self._tags = tags

    @property
    def original_filename(self):
        """Gets the original_filename of this Media.  # noqa: E501

        reference original media filename, path, uri or your application specific id that was provided during media upload.  # noqa: E501

        :return: The original_filename of this Media.  # noqa: E501
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this Media.

        reference original media filename, path, uri or your application specific id that was provided during media upload.  # noqa: E501

        :param original_filename: The original_filename of this Media.  # noqa: E501
        :type: str
        """
        if original_filename is not None and len(original_filename) > 1024:
            raise ValueError("Invalid value for `original_filename`, length must be less than or equal to `1024`")  # noqa: E501
        if original_filename is not None and len(original_filename) < 0:
            raise ValueError("Invalid value for `original_filename`, length must be greater than or equal to `0`")  # noqa: E501

        self._original_filename = original_filename

    @property
    def duration(self):
        """Gets the duration of this Media.  # noqa: E501

        reserved for future video processing  # noqa: E501

        :return: The duration of this Media.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Media.

        reserved for future video processing  # noqa: E501

        :param duration: The duration of this Media.  # noqa: E501
        :type: str
        """

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Media, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Media):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
