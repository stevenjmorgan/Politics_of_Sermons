# coding: utf-8

"""
    Betaface API 2.0

    Betaface face recognition API.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.point import Point  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class NewFace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x': 'float',
        'y': 'float',
        'width': 'float',
        'height': 'float',
        'angle': 'float',
        'points': 'list[Point]',
        'tags': 'list[Tag]',
        'set_person_id': 'str'
    }

    attribute_map = {
        'x': 'x',
        'y': 'y',
        'width': 'width',
        'height': 'height',
        'angle': 'angle',
        'points': 'points',
        'tags': 'tags',
        'set_person_id': 'set_person_id'
    }

    def __init__(self, x=None, y=None, width=None, height=None, angle=None, points=None, tags=None, set_person_id=None):  # noqa: E501
        """NewFace - a model defined in Swagger"""  # noqa: E501

        self._x = None
        self._y = None
        self._width = None
        self._height = None
        self._angle = None
        self._points = None
        self._tags = None
        self._set_person_id = None
        self.discriminator = None

        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if angle is not None:
            self.angle = angle
        self.points = points
        if tags is not None:
            self.tags = tags
        if set_person_id is not None:
            self.set_person_id = set_person_id

    @property
    def x(self):
        """Gets the x of this NewFace.  # noqa: E501

        x coordinate of the face bounding box center in pixels.  # noqa: E501

        :return: The x of this NewFace.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this NewFace.

        x coordinate of the face bounding box center in pixels.  # noqa: E501

        :param x: The x of this NewFace.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this NewFace.  # noqa: E501

        y coordinate of the face bounding box center in pixels.  # noqa: E501

        :return: The y of this NewFace.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this NewFace.

        y coordinate of the face bounding box center in pixels.  # noqa: E501

        :param y: The y of this NewFace.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def width(self):
        """Gets the width of this NewFace.  # noqa: E501

        width of the face bounding box center in pixels.  # noqa: E501

        :return: The width of this NewFace.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this NewFace.

        width of the face bounding box center in pixels.  # noqa: E501

        :param width: The width of this NewFace.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this NewFace.  # noqa: E501

        height of the face bounding box center in pixels.  # noqa: E501

        :return: The height of this NewFace.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this NewFace.

        height of the face bounding box center in pixels.  # noqa: E501

        :param height: The height of this NewFace.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def angle(self):
        """Gets the angle of this NewFace.  # noqa: E501

        in-plane rotation (roll) of the face bounding box center in degrees.  # noqa: E501

        :return: The angle of this NewFace.  # noqa: E501
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this NewFace.

        in-plane rotation (roll) of the face bounding box center in degrees.  # noqa: E501

        :param angle: The angle of this NewFace.  # noqa: E501
        :type: float
        """

        self._angle = angle

    @property
    def points(self):
        """Gets the points of this NewFace.  # noqa: E501

        face points. you have to specify minimum 3 points coordinates - type 512 (left eye), type 768 (right eye), type 2816 (mouth). point names are not required.  # noqa: E501

        :return: The points of this NewFace.  # noqa: E501
        :rtype: list[Point]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this NewFace.

        face points. you have to specify minimum 3 points coordinates - type 512 (left eye), type 768 (right eye), type 2816 (mouth). point names are not required.  # noqa: E501

        :param points: The points of this NewFace.  # noqa: E501
        :type: list[Point]
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")  # noqa: E501

        self._points = points

    @property
    def tags(self):
        """Gets the tags of this NewFace.  # noqa: E501

        (optional) face tags or labels to set manually.  # noqa: E501

        :return: The tags of this NewFace.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NewFace.

        (optional) face tags or labels to set manually.  # noqa: E501

        :param tags: The tags of this NewFace.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def set_person_id(self):
        """Gets the set_person_id of this NewFace.  # noqa: E501

        (optional) manually assign person id in format name@namespace.  # noqa: E501

        :return: The set_person_id of this NewFace.  # noqa: E501
        :rtype: str
        """
        return self._set_person_id

    @set_person_id.setter
    def set_person_id(self, set_person_id):
        """Sets the set_person_id of this NewFace.

        (optional) manually assign person id in format name@namespace.  # noqa: E501

        :param set_person_id: The set_person_id of this NewFace.  # noqa: E501
        :type: str
        """

        self._set_person_id = set_person_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewFace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewFace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
