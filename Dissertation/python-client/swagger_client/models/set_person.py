# coding: utf-8

"""
    Betaface API 2.0

    Betaface face recognition API.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SetPerson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'faces_uuids': 'list[str]',
        'person_id': 'str'
    }

    attribute_map = {
        'api_key': 'api_key',
        'faces_uuids': 'faces_uuids',
        'person_id': 'person_id'
    }

    def __init__(self, api_key=None, faces_uuids=None, person_id=None):  # noqa: E501
        """SetPerson - a model defined in Swagger"""  # noqa: E501

        self._api_key = None
        self._faces_uuids = None
        self._person_id = None
        self.discriminator = None

        self.api_key = api_key
        self.faces_uuids = faces_uuids
        if person_id is not None:
            self.person_id = person_id

    @property
    def api_key(self):
        """Gets the api_key of this SetPerson.  # noqa: E501

        your API key or d45fd466-51e2-4701-8da8-04351c872236  # noqa: E501

        :return: The api_key of this SetPerson.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this SetPerson.

        your API key or d45fd466-51e2-4701-8da8-04351c872236  # noqa: E501

        :param api_key: The api_key of this SetPerson.  # noqa: E501
        :type: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")  # noqa: E501

        self._api_key = api_key

    @property
    def faces_uuids(self):
        """Gets the faces_uuids of this SetPerson.  # noqa: E501

        list of face uuids to set person id. each face can have only one person id assigned to it. setting a person id overwrites the old value.  # noqa: E501

        :return: The faces_uuids of this SetPerson.  # noqa: E501
        :rtype: list[str]
        """
        return self._faces_uuids

    @faces_uuids.setter
    def faces_uuids(self, faces_uuids):
        """Sets the faces_uuids of this SetPerson.

        list of face uuids to set person id. each face can have only one person id assigned to it. setting a person id overwrites the old value.  # noqa: E501

        :param faces_uuids: The faces_uuids of this SetPerson.  # noqa: E501
        :type: list[str]
        """
        if faces_uuids is None:
            raise ValueError("Invalid value for `faces_uuids`, must not be `None`")  # noqa: E501

        self._faces_uuids = faces_uuids

    @property
    def person_id(self):
        """Gets the person_id of this SetPerson.  # noqa: E501

        person id in format name@namespace. name and namespace can include letters, numbers, dots, underscores and spaces. special name random@namespace could be used to assign random person name with specific namespace. Namespace part should not exceed 60 characters. Name part should not exceed 200 characters. Setting person_id to empty string resets the person id. Faces will be permanently stored for as long as person id is assigned to them. Faces without person ids will be deleted starting from 24 hours. Resetting person id on faces generated more than 24 hours ago may immediately delete the. When face is assigned to/removed from namespace search indexes of namespaces involved will asynchrously update. It may take from seconds to serveral minutes depending on namespace size for changes to propagate.  # noqa: E501

        :return: The person_id of this SetPerson.  # noqa: E501
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this SetPerson.

        person id in format name@namespace. name and namespace can include letters, numbers, dots, underscores and spaces. special name random@namespace could be used to assign random person name with specific namespace. Namespace part should not exceed 60 characters. Name part should not exceed 200 characters. Setting person_id to empty string resets the person id. Faces will be permanently stored for as long as person id is assigned to them. Faces without person ids will be deleted starting from 24 hours. Resetting person id on faces generated more than 24 hours ago may immediately delete the. When face is assigned to/removed from namespace search indexes of namespaces involved will asynchrously update. It may take from seconds to serveral minutes depending on namespace size for changes to propagate.  # noqa: E501

        :param person_id: The person_id of this SetPerson.  # noqa: E501
        :type: str
        """

        self._person_id = person_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetPerson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetPerson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
