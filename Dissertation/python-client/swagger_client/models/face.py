# coding: utf-8

"""
    Betaface API 2.0

    Betaface face recognition API.  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.point import Point  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class Face(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'face_uuid': 'str',
        'media_uuid': 'str',
        'x': 'float',
        'y': 'float',
        'width': 'float',
        'height': 'float',
        'angle': 'float',
        'detection_score': 'float',
        'points': 'list[Point]',
        'user_points': 'list[Point]',
        'tags': 'list[Tag]',
        'person_id': 'str',
        'appearance_id': 'int',
        'start': 'str',
        'duration': 'str'
    }

    attribute_map = {
        'face_uuid': 'face_uuid',
        'media_uuid': 'media_uuid',
        'x': 'x',
        'y': 'y',
        'width': 'width',
        'height': 'height',
        'angle': 'angle',
        'detection_score': 'detection_score',
        'points': 'points',
        'user_points': 'user_points',
        'tags': 'tags',
        'person_id': 'person_id',
        'appearance_id': 'appearance_id',
        'start': 'start',
        'duration': 'duration'
    }

    def __init__(self, face_uuid=None, media_uuid=None, x=None, y=None, width=None, height=None, angle=None, detection_score=None, points=None, user_points=None, tags=None, person_id=None, appearance_id=None, start=None, duration=None):  # noqa: E501
        """Face - a model defined in Swagger"""  # noqa: E501

        self._face_uuid = None
        self._media_uuid = None
        self._x = None
        self._y = None
        self._width = None
        self._height = None
        self._angle = None
        self._detection_score = None
        self._points = None
        self._user_points = None
        self._tags = None
        self._person_id = None
        self._appearance_id = None
        self._start = None
        self._duration = None
        self.discriminator = None

        if face_uuid is not None:
            self.face_uuid = face_uuid
        if media_uuid is not None:
            self.media_uuid = media_uuid
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if angle is not None:
            self.angle = angle
        if detection_score is not None:
            self.detection_score = detection_score
        if points is not None:
            self.points = points
        if user_points is not None:
            self.user_points = user_points
        if tags is not None:
            self.tags = tags
        if person_id is not None:
            self.person_id = person_id
        if appearance_id is not None:
            self.appearance_id = appearance_id
        if start is not None:
            self.start = start
        if duration is not None:
            self.duration = duration

    @property
    def face_uuid(self):
        """Gets the face_uuid of this Face.  # noqa: E501

        face unique identifier.  # noqa: E501

        :return: The face_uuid of this Face.  # noqa: E501
        :rtype: str
        """
        return self._face_uuid

    @face_uuid.setter
    def face_uuid(self, face_uuid):
        """Sets the face_uuid of this Face.

        face unique identifier.  # noqa: E501

        :param face_uuid: The face_uuid of this Face.  # noqa: E501
        :type: str
        """

        self._face_uuid = face_uuid

    @property
    def media_uuid(self):
        """Gets the media_uuid of this Face.  # noqa: E501

        media unique identifier.  # noqa: E501

        :return: The media_uuid of this Face.  # noqa: E501
        :rtype: str
        """
        return self._media_uuid

    @media_uuid.setter
    def media_uuid(self, media_uuid):
        """Sets the media_uuid of this Face.

        media unique identifier.  # noqa: E501

        :param media_uuid: The media_uuid of this Face.  # noqa: E501
        :type: str
        """

        self._media_uuid = media_uuid

    @property
    def x(self):
        """Gets the x of this Face.  # noqa: E501

        x coordinate of the face bounding box center in pixels.  # noqa: E501

        :return: The x of this Face.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Face.

        x coordinate of the face bounding box center in pixels.  # noqa: E501

        :param x: The x of this Face.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this Face.  # noqa: E501

        y coordinate of the face bounding box center in pixels.  # noqa: E501

        :return: The y of this Face.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Face.

        y coordinate of the face bounding box center in pixels.  # noqa: E501

        :param y: The y of this Face.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def width(self):
        """Gets the width of this Face.  # noqa: E501

        width of the face bounding box center in pixels.  # noqa: E501

        :return: The width of this Face.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Face.

        width of the face bounding box center in pixels.  # noqa: E501

        :param width: The width of this Face.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Face.  # noqa: E501

        height of the face bounding box center in pixels.  # noqa: E501

        :return: The height of this Face.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Face.

        height of the face bounding box center in pixels.  # noqa: E501

        :param height: The height of this Face.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def angle(self):
        """Gets the angle of this Face.  # noqa: E501

        in-plane rotation (roll) of the face bounding box center in degrees.  # noqa: E501

        :return: The angle of this Face.  # noqa: E501
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this Face.

        in-plane rotation (roll) of the face bounding box center in degrees.  # noqa: E501

        :param angle: The angle of this Face.  # noqa: E501
        :type: float
        """

        self._angle = angle

    @property
    def detection_score(self):
        """Gets the detection_score of this Face.  # noqa: E501

        confidence-like value of the face detection, low detection scores (lower than 0.5 for example) correspond to higher probability of false detection.  # noqa: E501

        :return: The detection_score of this Face.  # noqa: E501
        :rtype: float
        """
        return self._detection_score

    @detection_score.setter
    def detection_score(self, detection_score):
        """Sets the detection_score of this Face.

        confidence-like value of the face detection, low detection scores (lower than 0.5 for example) correspond to higher probability of false detection.  # noqa: E501

        :param detection_score: The detection_score of this Face.  # noqa: E501
        :type: float
        """

        self._detection_score = detection_score

    @property
    def points(self):
        """Gets the points of this Face.  # noqa: E501

        facial landmark points.  # noqa: E501

        :return: The points of this Face.  # noqa: E501
        :rtype: list[Point]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Face.

        facial landmark points.  # noqa: E501

        :param points: The points of this Face.  # noqa: E501
        :type: list[Point]
        """

        self._points = points

    @property
    def user_points(self):
        """Gets the user_points of this Face.  # noqa: E501

        user-defined facial landmark points.  # noqa: E501

        :return: The user_points of this Face.  # noqa: E501
        :rtype: list[Point]
        """
        return self._user_points

    @user_points.setter
    def user_points(self, user_points):
        """Sets the user_points of this Face.

        user-defined facial landmark points.  # noqa: E501

        :param user_points: The user_points of this Face.  # noqa: E501
        :type: list[Point]
        """

        self._user_points = user_points

    @property
    def tags(self):
        """Gets the tags of this Face.  # noqa: E501

        list of detected or labelled face tags - classifiers, attributes, measurements.  # noqa: E501

        :return: The tags of this Face.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Face.

        list of detected or labelled face tags - classifiers, attributes, measurements.  # noqa: E501

        :param tags: The tags of this Face.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def person_id(self):
        """Gets the person_id of this Face.  # noqa: E501

        assigned person id and namespace in format name@namespace.  # noqa: E501

        :return: The person_id of this Face.  # noqa: E501
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this Face.

        assigned person id and namespace in format name@namespace.  # noqa: E501

        :param person_id: The person_id of this Face.  # noqa: E501
        :type: str
        """

        self._person_id = person_id

    @property
    def appearance_id(self):
        """Gets the appearance_id of this Face.  # noqa: E501

        reserved for future video processing  # noqa: E501

        :return: The appearance_id of this Face.  # noqa: E501
        :rtype: int
        """
        return self._appearance_id

    @appearance_id.setter
    def appearance_id(self, appearance_id):
        """Sets the appearance_id of this Face.

        reserved for future video processing  # noqa: E501

        :param appearance_id: The appearance_id of this Face.  # noqa: E501
        :type: int
        """

        self._appearance_id = appearance_id

    @property
    def start(self):
        """Gets the start of this Face.  # noqa: E501

        reserved for future video processing  # noqa: E501

        :return: The start of this Face.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Face.

        reserved for future video processing  # noqa: E501

        :param start: The start of this Face.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def duration(self):
        """Gets the duration of this Face.  # noqa: E501

        reserved for future video processing  # noqa: E501

        :return: The duration of this Face.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Face.

        reserved for future video processing  # noqa: E501

        :param duration: The duration of this Face.  # noqa: E501
        :type: str
        """

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Face, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Face):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
